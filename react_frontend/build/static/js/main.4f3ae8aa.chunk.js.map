{"version":3,"sources":["ListItems.js","Cytoscape.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["mainListItems","ListItem","button","ListItemIcon","ListItemText","primary","styles","makeStyles","theme","container","paddingTop","spacing","paddingBottom","Cytoscape","prop","classes","this","props","Container","maxWidth","className","elements","data","id","label","position","x","y","source","target","style","width","height","cy","React","Component","withStyles","useStyles","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","paper","flexDirection","fixedHeight","Dashboard","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","component","variant","noWrap","Badge","badgeContent","Drawer","Divider","List","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f3ae8aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\n\r\nexport const mainListItems = (\r\n  <div>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <DashboardIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Dashboard\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <ShoppingCartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"レーダーチャート\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <PeopleIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"ヒストグラム\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <BarChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"グラフ\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <LayersIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Integrations\" />\r\n    </ListItem>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport CytoscapeComponent from 'react-cytoscapejs';\r\nimport Container from '@material-ui/core/Container';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = makeStyles((theme) => ({\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nclass Cytoscape extends React.Component {\r\n  constructor(prop) {\r\n    super(prop);\r\n  }\r\n\r\n    render() {\r\n      const { classes } = this.props;\r\n      const elements = [\r\n        { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\r\n        { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\r\n        { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\r\n     ];\r\n        return (\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <CytoscapeComponent \r\n              elements={elements} \r\n              style={{ width: '600px', height: '600px'}}\r\n              cy={(cy) => {this.cy = cy}}\r\n            />\r\n          </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Cytoscape);","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { mainListItems } from './ListItems';\r\nimport List from '@material-ui/core/List';\r\nimport Cytoscape from './Cytoscape';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n            Dashboard\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>{mainListItems}</List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Cytoscape />\r\n      </main>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}